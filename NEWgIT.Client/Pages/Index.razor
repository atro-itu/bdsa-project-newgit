@page "/"
@using System.Linq;

@inject HttpClient Http



<RadzenText TextStyle="TextStyle.H2" TagName="TagName.H1" Class="my-4" TextAlign="TextAlign.Center">
    Welcome to NEWgIT
</RadzenText>

<RadzenAlert AlertStyle="AlertStyle.Danger" ShowIcon="true" Variant="Variant.Flat" Shade="Shade.Lighter" Visible="@_notFoundAlert">
    Repository Not Found
</RadzenAlert>

<RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" TextAlign="TextAlign.Center"></RadzenText>

<AuthorizeView>
    <Authorized>
        <div style="display: flex; flex-direction: row; width: 500px; margin: auto;">
            <RadzenTextBox Placeholder="Repository owner" Change=@(args => OnChangeRepoOwner(args)) Class="TextBox" style="margin: 0px 12px"/>
            <h2>/</h2>
            <RadzenTextBox Placeholder="Repository name" Change=@(args => OnChangeRepoName(args)) Class="TextBox" style="margin: 0px 12px"/>
        </div>
        <RadzenButton class="AnalyzeButton" Click=@(args => OnAnalysis("Primary button")) Text="Analyze" ButtonStyle="ButtonStyle.Primary"/>
    </Authorized>
    <NotAuthorized>
        <div class="invalid login-warning ">
            <span role="alert" class="">You need to log in.</span>
        </div>
    </NotAuthorized>
</AuthorizeView>

@if (_repoOwner != null && _repoName != null)
{
    <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H1" Class="my-4" TextAlign="TextAlign.Center">
        Commit Frequency
    </RadzenText>

    <RadzenChart>
        <RadzenColumnSeries Data="@_allCommits" CategoryProperty="Date" Title="All Commits" LineType="LineType.Dashed" ValueProperty="commits">
        </RadzenColumnSeries>
        <RadzenColumnOptions Radius="5"/>
        <RadzenValueAxis>
            <RadzenGridLines Visible="true"/>
        </RadzenValueAxis>
    </RadzenChart>

    <RadzenAlert AlertStyle="AlertStyle.Danger" ShowIcon="true" Variant="Variant.Flat" Shade="Shade.Lighter" Visible="@_notFoundAlertAuthors">
        Authors Not Found
    </RadzenAlert>

    <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H1" Class="my-4" TextAlign="TextAlign.Center">
        Commit Frequency pr author
    </RadzenText>

@foreach (var author in _commitsPrAuthor)
{
    <RadzenChart>
        <RadzenColumnSeries Data="@author.Value" CategoryProperty="Date" Title="@author.Key" LineType="LineType.Dashed" ValueProperty="commits">
        </RadzenColumnSeries>
        <RadzenColumnOptions Radius="5"/>
        <RadzenValueAxis>
            <RadzenGridLines Visible="true"/>
        </RadzenValueAxis>
    </RadzenChart>
}

    <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H1" Class="my-4" TextAlign="TextAlign.Center">
        Forks
    </RadzenText>
    <div class="forks-list">
        <RadzenDataList WrapItems="true" AllowPaging="false" Data="@_shownForks" TItem="string" EmptyText="This repository hasn't been forked">
            <Template Context="fork">
                <a href="https://github.com/@fork" class="github-card">
                    <img src="https://gh-card.dev/repos/@fork .svg?fullname="/>
                </a>
            </Template>
        </RadzenDataList>
        <RadzenPager ShowPagingSummary="true" PagingSummaryFormat="@PagingSummaryFormat" HorizontalAlign="HorizontalAlign.Right" Count="_count" PageSize="@PageSize" PageNumbersCount="5" PageChanged="@ForksPageChanged" />
    </div>
}

@code {
    ICollection<string> _forks = new List<string>();
    readonly Dictionary<string, CommitItem[]> _commitsPrAuthor = new Dictionary<string, CommitItem[]>();
    string? _repoOwner;
    string? _repoName;
    CommitItem[]? _allCommits;
    bool _notFoundAlert = false;
    bool _notFoundAlertAuthors = false;
    const string PagingSummaryFormat = "Displaying page {0} of {1} (total {2} records)";
    const int PageSize = 6;
    int _count;
    IEnumerable<string>? _shownForks;

    void OnChangeRepoOwner(string repoOwner)
    {
        this._repoOwner = repoOwner;
    }

    void OnChangeRepoName(string repoName)
    {
        this._repoName = repoName;
    }

    async void OnAnalysis(string buttonName)
    {
        _notFoundAlert = false;
        _notFoundAlertAuthors = false;

        // TODO: Reset 
        
        await Analyse();
        await AnalyseAllCommits();
        AnalysePrAuthor();
        AnalyseForks();
        StateHasChanged();
    }

    async Task Analyse()
    {
        try
        {
            HttpResponseMessage responsePost = await Http.PostAsync($"https://localhost:7235/analysis/{_repoOwner}/{_repoName}", null);
            if ((int)responsePost.StatusCode == 409){
                HttpResponseMessage responsePut = await Http.PutAsync($"https://localhost:7235/analysis/{_repoOwner}/{_repoName}", null);
            } 
            if ((int)responsePost.StatusCode == 404){
                _notFoundAlert = true;
                StateHasChanged();
                return;
            }
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine("\nException Caught!");
            Console.WriteLine("Message :{0} ", e.Message);
        }
    }

    async Task AnalyseAllCommits()
    {
        try
        {   
            HttpResponseMessage responseGet = await Http.GetAsync($"https://localhost:7235/analysis/{_repoOwner}/{_repoName}/frequency");
            if ((int)responseGet.StatusCode == 404){
                _notFoundAlert = true;
                StateHasChanged();
                return;
            }
            responseGet.EnsureSuccessStatusCode();

            var responseBody = await responseGet.Content.ReadFromJsonAsync<FrequenciesDTO>();
            if (responseBody == null) return;
            
            var frequencyResponse = responseBody.Frequencies;
            _allCommits = frequencyResponse.OrderBy((pair) => pair.Key)
                                          .Select((pair) => new CommitItem{Date = pair.Key, Commits =  pair.Value})
                                          .ToArray();
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine("\nException Caught!");
            Console.WriteLine("Message :{0} ", e.Message);
        }
    }

    async void AnalysePrAuthor()
    {
        try
        {
            HttpResponseMessage responsePrAuthor = await Http.GetAsync($"https://localhost:7235/analysis/{_repoOwner}/{_repoName}/author");
            if ((int)responsePrAuthor.StatusCode == 404){
                _notFoundAlertAuthors = true;
                StateHasChanged();
                return;
            }
            
            responsePrAuthor.EnsureSuccessStatusCode();

            var responseBody = await responsePrAuthor.Content.ReadFromJsonAsync<AuthorsDTO>();
            if (responseBody == null) return;
            var authorResponse = responseBody.AuthorFrequencies;
            _commitsPrAuthor.Clear();
            foreach (var author in authorResponse)
            {
                var authorArr = author.Value.OrderBy((pair) => pair.Key)
                                                       .Select((pair) => new CommitItem{Date = pair.Key, Commits =  pair.Value})
                                                       .ToArray();
                
                _commitsPrAuthor.Add(author.Key, authorArr);
            }

        }
        catch (HttpRequestException e)
        {
            Console.WriteLine("\nException Caught!");
            Console.WriteLine("Message :{0} ", e.Message);
        }
    }

    async void AnalyseForks()
    {
        try
        {
            HttpResponseMessage response = await Http.GetAsync($"https://localhost:7235/analysis/{_repoOwner}/{_repoName}/forks");
            response.EnsureSuccessStatusCode();
            var responseBody = await response.Content.ReadFromJsonAsync<ForksDTO>();
            if (responseBody == null) return;
            _forks = responseBody.Forks;
            ForksLoaded();
            StateHasChanged();
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine("\nException Caught!");
            Console.WriteLine("Message :{0} ", e.Message);
        }
    }

    private void ForksLoaded()
    {
        _count = _forks.Count();
        _shownForks = GetForks(0, PageSize);
    }

    void ForksPageChanged(PagerEventArgs args)
    {
        _shownForks = GetForks(args.Skip, args.Top);
    }

    IEnumerable<string> GetForks(int skip, int take)
    {
        return _forks.Skip(skip).Take(take).ToList();
    }

    //Helper 
    class CommitItem
    {
        public DateOnly Date { get; set; }
        public int Commits { get; set; }
    }

    public record AuthorsDTO(Dictionary<string, Dictionary<DateOnly, int>> AuthorFrequencies);
    
    public record ForksDTO(ICollection<string> Forks);

    public record FrequenciesDTO(Dictionary<DateOnly, int> Frequencies);
}
